##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
# 
# frozen_string_literal: true

module Twilio
  module REST
    class Studio < Domain
      class V1 < Version
        class FlowContext < InstanceContext
          class ExecutionContext < InstanceContext
            class ExecutionStepContext < InstanceContext
              ##
              # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
              class ExecutionStepContextList < ListResource
                ##
                # Initialize the ExecutionStepContextList
                # @param [Version] version Version that contains the resource
                # @param [String] flow_sid The flow_sid
                # @param [String] execution_sid The execution_sid
                # @param [String] step_sid The step_sid
                # @return [ExecutionStepContextList] ExecutionStepContextList
                def initialize(version, flow_sid: nil, execution_sid: nil, step_sid: nil)
                  super(version)

                  # Path Solution
                  @solution = {flow_sid: flow_sid, execution_sid: execution_sid, step_sid: step_sid}
                end

                ##
                # Provide a user friendly representation
                def to_s
                  '#<Twilio.Studio.V1.ExecutionStepContextList>'
                end
              end

              ##
              # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
              class ExecutionStepContextPage < Page
                ##
                # Initialize the ExecutionStepContextPage
                # @param [Version] version Version that contains the resource
                # @param [Response] response Response from the API
                # @param [Hash] solution Path solution for the resource
                # @return [ExecutionStepContextPage] ExecutionStepContextPage
                def initialize(version, response, solution)
                  super(version, response)

                  # Path Solution
                  @solution = solution
                end

                ##
                # Build an instance of ExecutionStepContextInstance
                # @param [Hash] payload Payload response from the API
                # @return [ExecutionStepContextInstance] ExecutionStepContextInstance
                def get_instance(payload)
                  ExecutionStepContextInstance.new(
                      @version,
                      payload,
                      flow_sid: @solution[:flow_sid],
                      execution_sid: @solution[:execution_sid],
                      step_sid: @solution[:step_sid],
                  )
                end

                ##
                # Provide a user friendly representation
                def to_s
                  '<Twilio.Studio.V1.ExecutionStepContextPage>'
                end
              end

              ##
              # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
              class ExecutionStepContextContext < InstanceContext
                ##
                # Initialize the ExecutionStepContextContext
                # @param [Version] version Version that contains the resource
                # @param [String] flow_sid The flow_sid
                # @param [String] execution_sid The execution_sid
                # @param [String] step_sid The step_sid
                # @return [ExecutionStepContextContext] ExecutionStepContextContext
                def initialize(version, flow_sid, execution_sid, step_sid)
                  super(version)

                  # Path Solution
                  @solution = {flow_sid: flow_sid, execution_sid: execution_sid, step_sid: step_sid, }
                  @uri = "/Flows/#{@solution[:flow_sid]}/Executions/#{@solution[:execution_sid]}/Steps/#{@solution[:step_sid]}/Context"
                end

                ##
                # Fetch a ExecutionStepContextInstance
                # @return [ExecutionStepContextInstance] Fetched ExecutionStepContextInstance
                def fetch
                  params = Twilio::Values.of({})

                  payload = @version.fetch(
                      'GET',
                      @uri,
                      params,
                  )

                  ExecutionStepContextInstance.new(
                      @version,
                      payload,
                      flow_sid: @solution[:flow_sid],
                      execution_sid: @solution[:execution_sid],
                      step_sid: @solution[:step_sid],
                  )
                end

                ##
                # Provide a user friendly representation
                def to_s
                  context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
                  "#<Twilio.Studio.V1.ExecutionStepContextContext #{context}>"
                end
              end

              ##
              # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
              class ExecutionStepContextInstance < InstanceResource
                ##
                # Initialize the ExecutionStepContextInstance
                # @param [Version] version Version that contains the resource
                # @param [Hash] payload payload that contains response from Twilio
                # @param [String] flow_sid The flow_sid
                # @param [String] execution_sid The execution_sid
                # @param [String] step_sid The step_sid
                # @return [ExecutionStepContextInstance] ExecutionStepContextInstance
                def initialize(version, payload, flow_sid: nil, execution_sid: nil, step_sid: nil)
                  super(version)

                  # Marshaled Properties
                  @properties = {
                      'account_sid' => payload['account_sid'],
                      'context' => payload['context'],
                      'execution_sid' => payload['execution_sid'],
                      'flow_sid' => payload['flow_sid'],
                      'step_sid' => payload['step_sid'],
                      'url' => payload['url'],
                  }

                  # Context
                  @instance_context = nil
                  @params = {'flow_sid' => flow_sid, 'execution_sid' => execution_sid, 'step_sid' => step_sid, }
                end

                ##
                # Generate an instance context for the instance, the context is capable of
                # performing various actions.  All instance actions are proxied to the context
                # @return [ExecutionStepContextContext] ExecutionStepContextContext for this ExecutionStepContextInstance
                def context
                  unless @instance_context
                    @instance_context = ExecutionStepContextContext.new(
                        @version,
                        @params['flow_sid'],
                        @params['execution_sid'],
                        @params['step_sid'],
                    )
                  end
                  @instance_context
                end

                ##
                # @return [String] The account_sid
                def account_sid
                  @properties['account_sid']
                end

                ##
                # @return [Hash] The context
                def context
                  @properties['context']
                end

                ##
                # @return [String] The execution_sid
                def execution_sid
                  @properties['execution_sid']
                end

                ##
                # @return [String] The flow_sid
                def flow_sid
                  @properties['flow_sid']
                end

                ##
                # @return [String] The step_sid
                def step_sid
                  @properties['step_sid']
                end

                ##
                # @return [String] The url
                def url
                  @properties['url']
                end

                ##
                # Fetch a ExecutionStepContextInstance
                # @return [ExecutionStepContextInstance] Fetched ExecutionStepContextInstance
                def fetch
                  context.fetch
                end

                ##
                # Provide a user friendly representation
                def to_s
                  values = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                  "<Twilio.Studio.V1.ExecutionStepContextInstance #{values}>"
                end

                ##
                # Provide a detailed, user friendly representation
                def inspect
                  values = @properties.map{|k, v| "#{k}: #{v}"}.join(" ")
                  "<Twilio.Studio.V1.ExecutionStepContextInstance #{values}>"
                end
              end
            end
          end
        end
      end
    end
  end
end